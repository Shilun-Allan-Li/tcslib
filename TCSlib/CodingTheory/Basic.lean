/-
Copyright (c) 2024 Shilun Li. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Shilun Li
-/

import Mathlib.Logic.Equiv.Fin
import Mathlib.Analysis.SpecificLimits.Normed
import Mathlib.InformationTheory.Hamming
import Mathlib.Data.Finset.Basic
import Mathlib.Init.Set
import Mathlib.Tactic.Linarith

/-!
# Code Definitions

`Code n ùîΩ`: a subset of ùîΩ‚Åø.
`AsymptoticCodes ùîΩ`: a map from ‚Ñï to `Code n ùîΩ`.

-/

open Set Filter Asymptotics Finset Linarith

namespace CodingTheory

-- variable {ùîΩ : Type*} [Field ùîΩ] [Fintype ùîΩ] [DecidableEq ùîΩ]
variable {Œ± : Type*} [Fintype Œ±] [DecidableEq Œ±] -- the alphabet
variable {n k : ‚Ñï}


/-- An element of ùîΩ‚Åø. -/
abbrev Codeword (n : ‚Ñï) (Œ± : Type*) [Fintype Œ±] [DecidableEq Œ±] := (i : Fin n) ‚Üí Œ±


/-- Code `Code n ùîΩ` is a subset of ùîΩ‚Åø. -/
abbrev Code (n : ‚Ñï) (Œ± : Type*) [Fintype Œ±] [DecidableEq Œ±] := Finset (Codeword n Œ±)

instance CodeOrder : LinearOrder (Code n Œ±) where
  le := fun (a: Code n Œ±) (b: Code n Œ± ) ‚Ü¶ a.card ‚â§ b.card
  le_refl := by {
    simp
  }
  le_trans := by {
    intros a b c hab hbc
    simp at *
    exact Nat.le_trans hab hbc
  }
  le_antisymm := by {
    intros a b hab hab
    simp at *

  }


/-- AsymptoticCodes is a map from ‚Ñï to `Code n ùîΩ`. -/
-- def AsymptoticCodes (Œ± : Type*) (S : Set ‚Ñï) (hs : S.Infinite) [Fintype Œ±] [DecidableEq Œ±] :=  (n : S) ‚Üí Code n Œ±


def hamming_distance (c1 c2 : Codeword n Œ±) : ‚Ñï :=
  hammingDist c1 c2


/-- Perhaps add C.card >=2 --/
def distance (C : Code n Œ±) (d : ‚Ñï) : Prop :=
  (‚àÉ x ‚àà C, ‚àÉ y ‚àà C, x ‚â† y ‚àß hamming_distance x y = d)‚àß (‚àÄ z ‚àà C, ‚àÄ w ‚àà C, z ‚â† w ‚Üí hamming_distance z w ‚â• d)


def max_size (n d: ‚Ñï) (A : ‚Ñï): Prop :=
  ‚àÉ C : Code n Œ±, (distance C d ‚àß (C.card = A) ‚àß (‚àÄ c : Code n Œ±, distance c d ‚Üí c.card ‚â§ C.card))

lemma dist_le_length (C : Code n Œ±) (d : ‚Ñï) (h : distance C d) : d <= n := by{
  rcases h with ‚ü®h1, _‚ü©
  rcases h1 with ‚ü®c‚ÇÅ, ‚ü®_, ‚ü®c‚ÇÇ, ‚ü®_, ‚ü®_, hdeq‚ü©‚ü©‚ü©‚ü©‚ü©
  have hle : hammingDist c‚ÇÅ c‚ÇÇ <= n
  ¬∑ calc
      hammingDist c‚ÇÅ c‚ÇÇ <= Fintype.card (Fin n) := by exact hammingDist_le_card_fintype
      _                 = n                    := by rel[Fintype.card_fin n]
  dsimp [hamming_distance] at hdeq
  rw[hdeq] at hle
  exact hle
}

theorem singleton_bound (C : Code n Œ±) (d : ‚Ñï) (h : distance C d) (hŒ± : Nontrivial Œ±):
  C.card ‚â§ (Fintype.card Œ±)^(n - d + 1) := by {
  by_cases h01: C.card = 0 ‚à® C.card = 1
  ¬∑ rcases h01 with h0|h1
    ¬∑ rw[h0]
      exact Nat.zero_le (Fintype.card Œ± ^ (n - d + 1))
    ¬∑ rw[h1]
      have hcard : 0 < Fintype.card Œ±
      ¬∑ exact Fintype.card_pos
      have h' : n-d+1 >=1
      ¬∑ linarith
      exact Nat.one_le_pow (n-d+1) (Fintype.card Œ±) (hcard)


  by_contra h'
  push_neg at h' h01

  have h_two_le_card_C: 1 < C.card
  ¬∑ exact (Nat.two_le_iff C.card).mpr h01

  have h_dist_le_length : d <= n
  ¬∑ exact dist_le_length C d h

  have h_one_le_d : 1 <= d
  ¬∑ by_contra h_d_le_one
    push_neg at h_d_le_one
    apply Nat.lt_one_iff.1 at h_d_le_one
    rcases h.1 with ‚ü®c‚ÇÅ, ‚ü®_, ‚ü®c‚ÇÇ, ‚ü®_, ‚ü®hneq, hdzero‚ü©‚ü©‚ü©‚ü©‚ü©
    rw[h_d_le_one] at hdzero
    dsimp [hamming_distance]at hdzero
    symm at hdzero
    apply hamming_zero_eq_dist.1 at hdzero
    tauto

  have h_n_gt_one : 1 <= n
  ¬∑ calc
      n >= d := by exact dist_le_length C d h
      _ >= 1 := by exact h_one_le_d

  have hle : n - d + 1 <= n := by{
    calc
      n - d + 1 <= n - 1 + 1 := by rel[h_one_le_d]
              _  = n         := by exact Nat.sub_add_cancel h_n_gt_one
  }

  obtain ‚ü®_, h_hd_gt‚ü© := h
  simp [Code, Codeword] at C

  let f : Codeword n Œ± ‚Üí Codeword (n-d+1) Œ± := fun c ‚Ü¶ (fun i ‚Ü¶ c ((Fin.castLE hle) i))

  let K : (Finset (Codeword (n-d+1) Œ±)) := Finset.univ
  have h_f_to_K : ‚àÄ c ‚àà C, f c ‚àà K
  ¬∑ intros c _
    simp

  have h_Kcard: K.card = Fintype.card Œ± ^ (n- d + 1)
  ¬∑ simp
    rw[Finset.card_univ]
    simp

  rw[‚Üê h_Kcard] at h'
  rcases Finset.exists_ne_map_eq_of_card_lt_of_maps_to h' h_f_to_K with ‚ü®c‚ÇÅ, ‚ü®hc‚ÇÅ_mem, ‚ü®c‚ÇÇ,‚ü®hc‚ÇÇ_mem, ‚ü®hc‚ÇÅ‚ÇÇ_neq, hc‚ÇÅ‚ÇÇfeq‚ü©‚ü©‚ü©‚ü©‚ü©
  simp [f] at hc‚ÇÅ‚ÇÇfeq
  specialize h_hd_gt c‚ÇÅ hc‚ÇÅ_mem c‚ÇÇ hc‚ÇÇ_mem hc‚ÇÅ‚ÇÇ_neq

  have h_card_complement : (filter (fun i => c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card +
  (filter (fun i => ¬¨c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card = n
  ¬∑ dsimp[Finset.card]
    rw[‚Üê Multiset.card_add (Multiset.filter (fun i => c‚ÇÅ i = c‚ÇÇ i) Finset.univ.val) (Multiset.filter (fun i => ¬¨c‚ÇÅ i = c‚ÇÇ i) Finset.univ.val)]
    rw[Multiset.filter_add_not (fun i => c‚ÇÅ i = c‚ÇÇ i) Finset.univ.val]
    simp

  have h_card_eq_ge_d : (filter (fun i => c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card >= n - d + 1
  ¬∑ let S‚ÇÅ : Finset (Fin n) := filter (fun i => i < n - d +1) Finset.univ
    have h_S_disj : Disjoint S‚ÇÅ S‚ÇÅ·∂ú
    ¬∑ exact disjoint_compl_right
    rw [‚Üê Finset.union_compl S‚ÇÅ]
    rw [Finset.filter_union]
    have h_filter_disj : Disjoint (filter (fun i => c‚ÇÅ i = c‚ÇÇ i) S‚ÇÅ) (filter (fun i => c‚ÇÅ i = c‚ÇÇ i) S‚ÇÅ·∂ú)
    ¬∑ exact disjoint_filter_filter h_S_disj
    rw[Finset.card_union_eq h_filter_disj]

    have h_filter_eq_S‚ÇÅ : filter (fun i => c‚ÇÅ i = c‚ÇÇ i) S‚ÇÅ = S‚ÇÅ
    ¬∑ ext i
      constructor
      ¬∑ exact fun a => mem_of_mem_filter i a
      ¬∑ simp
        intro hi
        constructor
        ¬∑ exact hi
        ¬∑ apply Function.funext_iff.1 at hc‚ÇÅ‚ÇÇfeq
          have h_cast_eq : i = Fin.castLE hle i
          ¬∑ ext
            simp
            exact (Nat.mod_eq_of_lt hi).symm
          specialize hc‚ÇÅ‚ÇÇfeq i
          rw[h_cast_eq]
          exact hc‚ÇÅ‚ÇÇfeq

    have h_Scard : S‚ÇÅ.card = n - d + 1
    ¬∑ apply Finset.card_eq_of_equiv_fin
      simp [Fin]
      apply Fintype.equivFinOfCardEq
      exact Fintype.card_fin_lt_of_le hle

    rw[h_filter_eq_S‚ÇÅ]
    rw[h_Scard]
    simp


  have h_hd_lt_d : hamming_distance c‚ÇÅ c‚ÇÇ < d
  ¬∑ dsimp [hamming_distance, hammingDist]
    calc
      (filter (fun i => ¬¨c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card = (filter (fun i => c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card
                                                          + (filter (fun i => ¬¨c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card
                                                          - (filter (fun i => c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card  := by exact (Nat.add_sub_cancel_left (filter (fun i => c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card (filter (fun i => ¬¨c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card).symm
                                                      _ = n - (filter (fun i => c‚ÇÅ i = c‚ÇÇ i) Finset.univ).card:= by rw[h_card_complement]
                                                      _ <= n - (n - d + 1) := by rel[h_card_eq_ge_d]
                                                      _ = n - (n - d) - 1  := by rw[Nat.sub_sub]
                                                      _ = d - 1            := by rw[Nat.sub_sub_self h_dist_le_length]
                                                      _ < d                := by exact Nat.sub_lt h_one_le_d Nat.zero_lt_one

  apply Nat.lt_le_asymm at h_hd_lt_d
  tauto
}

@[simp]
def hamming_ball (l : ‚Ñï) (c : Codeword n Œ±) : Finset (Codeword n Œ±) := {c' : Codeword n Œ± | hamming_distance c' c ‚â§ l}.toFinset

lemma hamming_ball_size (n l : ‚Ñï ): ‚àÄ c : Codeword n Œ±, (hamming_ball l c).card = (Finset.sum (Finset.range (l + 1)) (Œª i=> Nat.choose n i * (Fintype.card Œ± - 1)^i)) := by{
  intro c
  simp
  rw[Set.toFinset_card]

}


set_option maxHeartbeats 1000000

lemma hamming_ball_non_intersect (C : Code n Œ±) (h : distance C d) (h' : 0 < d): ‚àÄ c‚ÇÅ c‚ÇÇ : Codeword n Œ±, (c‚ÇÅ ‚àà C ‚àß c‚ÇÇ ‚àà C ‚àß c‚ÇÅ ‚â† c‚ÇÇ) ‚Üí ‚àÄ c' : Codeword n Œ±, c' ‚àà (hamming_ball (Nat.floor ((d-1)/2)) c‚ÇÅ) ‚Üí c' ‚àâ  (hamming_ball (Nat.floor ((d-1)/2)) c‚ÇÇ) := by {
  intros c‚ÇÅ c‚ÇÇ hc‚ÇÅ‚ÇÇ c' hc'

  dsimp [hamming_ball, hamming_distance] at *

  have h_dist_c‚ÇÅ‚ÇÇ : hamming_distance c‚ÇÅ c‚ÇÇ ‚â• d
  ¬∑ exact h.2 c‚ÇÅ hc‚ÇÅ‚ÇÇ.1 c‚ÇÇ hc‚ÇÅ‚ÇÇ.2.1 hc‚ÇÅ‚ÇÇ.2.2

  have h_dist_c‚ÇÅ' : hamming_distance c‚ÇÅ c' ‚â§ (d-1)/2
  ¬∑ apply Set.mem_toFinset.1 at hc'
    simp at hc'
    rw[hammingDist_comm c' c‚ÇÅ] at hc'
    exact hc'

  by_contra h_dist_c'‚ÇÇ
  apply Set.mem_toFinset.1 at h_dist_c'‚ÇÇ
  simp at h_dist_c'‚ÇÇ

  have : (d - 1)/2 + (d - 1)/2 = (d - 1)
  ¬∑ refine Int.coe_nat_inj'.mp ?this.a
    refine Rat.intCast_inj.mp ?this.a.a
    simp
    ring
    rw[div_mul_cancel (d-1) 2]


  have h_cont : hamming_distance c‚ÇÅ c‚ÇÇ < d
  ¬∑ simp [hamming_distance] at *
    calc
      hammingDist c‚ÇÅ c‚ÇÇ ‚â§ hammingDist c‚ÇÅ c' + hammingDist c' c‚ÇÇ := by exact hammingDist_triangle c‚ÇÅ c' c‚ÇÇ
      _                 ‚â§ (d - 1)/2         + (d - 1)/2         := by linarith [h_dist_c‚ÇÅ', h_dist_c'‚ÇÇ]
      _                 = d - 1                                 := by exact this
      _                 < d                                     := by exact Nat.sub_lt h' Nat.one_pos

  linarith

}

lemma hamming_ball'_disjoint (C : Code n Œ±) (h : distance C d) (h' : 0 < d) : ‚àÄ c‚ÇÅ c‚ÇÇ : Codeword n Œ±, (c‚ÇÅ ‚àà C ‚àß c‚ÇÇ ‚àà C ‚àß c‚ÇÅ ‚â† c‚ÇÇ) ‚Üí Disjoint (hamming_ball (Nat.floor ((d-1)/2)) c‚ÇÅ) (hamming_ball (Nat.floor ((d-1)/2)) c‚ÇÇ) := by {
  intros c‚ÇÅ c‚ÇÇ hc‚ÇÅ‚ÇÇ
  dsimp [hamming_ball]
  apply Set.disjoint_toFinset.2
  apply Set.disjoint_iff.2
  intros c' hc'
  simp at *
  rcases hc' with ‚ü®hc'‚ÇÅ, hc'‚ÇÇ‚ü©
  have : c' ‚àà (hamming_ball (Nat.floor ((d-1)/2)) c‚ÇÅ)
  ¬∑ dsimp [hamming_ball]
    apply Set.mem_toFinset.2
    simp
    exact hc'‚ÇÅ

  apply hamming_ball_non_intersect C h h' c‚ÇÅ c‚ÇÇ hc‚ÇÅ‚ÇÇ c'
  exact this
  simp
  apply Set.mem_toFinset.2
  simp
  exact hc'‚ÇÇ
}


theorem hamming_bound (C : Code n Œ±) (d A : ‚Ñï) (h : distance C d) (h' : Fintype.card Œ± = q) (h'' : Fintype.card Œ± >1) :
C.card ‚â§ q^n / (Finset.sum (Finset.range (d + 1)) (Œª i=> Nat.choose n i * (q - 1)^i)) := by {
  have h1 : 0 < Finset.sum (Finset.range (d + 1)) (Œª i=> Nat.choose n i * (q - 1)^i)
  ¬∑ apply Finset.sum_pos
    intros i hi
    apply mul_pos
    ¬∑ apply Nat.choose_pos
      calc
        i ‚â§ d  := by linarith [Finset.mem_range.1 hi]
        _ ‚â§ n  := by exact dist_le_length C d h
    ¬∑ rw[‚Üê h']
      apply Nat.pos_pow_of_pos
      simp
      exact h''
    simp


  suffices C.card * (Finset.sum (Finset.range (d + 1)) (Œª i=> Nat.choose n i * (q - 1)^i)) ‚â§ q^n by exact (Nat.le_div_iff_mul_le h1).mpr this

  let S : Finset (Codeword n Œ±) := Finset.univ
  have h_Scard: S.card = q ^ n
  ¬∑ simp
    rw[Finset.card_univ]
    simp
    rw[h']

  let SU : Finset (Codeword n Œ±) := (‚ãÉ (c : C), (hamming_ball (Nat.floor ((d-1)/2)) c))



}



All Messages (2)
