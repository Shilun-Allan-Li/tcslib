{"name":"Std.Lean.Meta.UnusedNames","instances":[],"imports":["Init","Lean.Meta","Std.Data.String.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L138-L140","name":"Lean.Meta.getUnusedUserNames","line":138,"kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserNames","doc":"Obtain `n` distinct names such that each name is unused in the current local\ncontext and `suggestion` is a prefix of each name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnusedUserNames</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">Lean.MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suggestion : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L131-L132","name":"Lean.Meta.getUnusedUserName","line":131,"kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserName","doc":"Obtain a name `n` such that `n` is unused in the current local context and\n`suggestion` is a prefix of `n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnusedUserName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">Lean.MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(suggestion : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L117-L120","name":"Lean.LocalContext.getUnusedUserNames.loop","line":117,"kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNames.loop","doc":"Auxiliary definition for `getUnusedUserNames`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNames.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getUnusedUserNames</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(suggestion : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L105-L120","name":"Lean.LocalContext.getUnusedUserNames","line":105,"kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNames","doc":"Obtain `n` distinct names such that each name is unused in the given local\ncontext and `suggestion` is a prefix of each name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNames\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getUnusedUserNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suggestion : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L95-L99","name":"Lean.LocalContext.getUnusedUserName","line":95,"kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserName","doc":"Obtain a name `n` such that `n` is unused in the given local context and\n`suggestion` is a prefix of `n`. This is similar to `getUnusedName` but uses\na different algorithm which may or may not be faster.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getUnusedUserName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suggestion : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L86-L88","name":"Lean.LocalContext.getUnusedUserNameIndex.updateMinSuffix","line":86,"kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNameIndex.updateMinSuffix","doc":"Auxiliary definition for `getUnusedUserNameIndex`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNameIndex.updateMinSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getUnusedUserNameIndex</span>.<span class=\"name\">updateMinSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L71-L88","name":"Lean.LocalContext.getUnusedUserNameIndex","line":71,"kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNameIndex","doc":"Obtain the least natural number `i` such that `suggestion ++ \"_i\"` is an unused\nname in the given local context. If `suggestion` itself is unused, the result\nis `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNameIndex\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getUnusedUserNameIndex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suggestion : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L42-L59","name":"Lean.Name.matchUpToIndexSuffix","line":42,"kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.matchUpToIndexSuffix","doc":"Succeeds if `n` is equal to `query`, except `n` may have an additional `_i`\nsuffix for some natural number `i`. More specifically:\n\n- If `n = query`, the result is `exactMatch`.\n- If `n = query ++ \"_i\"` for some natural number `i`, the result is\n  `suffixMatch i`.\n- Otherwise the result is `noMatch`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Name.matchUpToIndexSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">matchUpToIndexSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(query : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\">Lean.Name.MatchUpToIndexSuffix</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L30-L31","name":"Lean.Name.MatchUpToIndexSuffix.suffixMatch","line":30,"kind":"ctor","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.suffixMatch","doc":"Match up to suffix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.suffixMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">MatchUpToIndexSuffix</span>.<span class=\"name\">suffixMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\">Lean.Name.MatchUpToIndexSuffix</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L28-L29","name":"Lean.Name.MatchUpToIndexSuffix.noMatch","line":28,"kind":"ctor","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.noMatch","doc":"No match. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.noMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">MatchUpToIndexSuffix</span>.<span class=\"name\">noMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\">Lean.Name.MatchUpToIndexSuffix</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L26-L27","name":"Lean.Name.MatchUpToIndexSuffix.exactMatch","line":26,"kind":"ctor","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.exactMatch","doc":"Exact match. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.exactMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">MatchUpToIndexSuffix</span>.<span class=\"name\">exactMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\">Lean.Name.MatchUpToIndexSuffix</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/ca91956e8d5c311e00d6a69eb93d5eb5eef9b37d/Std/Lean/Meta/UnusedNames.lean#L25-L31","name":"Lean.Name.MatchUpToIndexSuffix","line":25,"kind":"inductive","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix","doc":"Result type of `Lean.Name.matchUpToIndexSuffix`. See there for details.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">MatchUpToIndexSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}