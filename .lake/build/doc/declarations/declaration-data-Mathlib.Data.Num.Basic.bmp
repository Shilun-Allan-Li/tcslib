{"name":"Mathlib.Data.Num.Basic","instances":[{"typeNames":["Eq"],"name":"instDecidableEqPosNum","className":"Decidable"},{"typeNames":["PosNum"],"name":"instOnePosNum","className":"One"},{"typeNames":["PosNum"],"name":"instInhabitedPosNum","className":"Inhabited"},{"typeNames":["Eq"],"name":"instDecidableEqNum","className":"Decidable"},{"typeNames":["Num"],"name":"instZeroNum","className":"Zero"},{"typeNames":["Num"],"name":"instOneNum","className":"One"},{"typeNames":["Num"],"name":"instInhabitedNum","className":"Inhabited"},{"typeNames":["Eq"],"name":"instDecidableEqZNum","className":"Decidable"},{"typeNames":["ZNum"],"name":"instZeroZNum","className":"Zero"},{"typeNames":["ZNum"],"name":"instOneZNum","className":"One"},{"typeNames":["ZNum"],"name":"instInhabitedZNum","className":"Inhabited"},{"typeNames":["PosNum"],"name":"PosNum.instAddPosNum","className":"Add"},{"typeNames":["PosNum"],"name":"PosNum.instMulPosNum","className":"Mul"},{"typeNames":["PosNum","HAdd.hAdd"],"name":"PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat","className":"OfNat"},{"typeNames":["PosNum"],"name":"PosNum.instLTPosNum","className":"LT"},{"typeNames":["PosNum"],"name":"PosNum.instLEPosNum","className":"LE"},{"typeNames":[],"name":"PosNum.decidableLT","className":"Decidable"},{"typeNames":[],"name":"PosNum.decidableLE","className":"Decidable"},{"typeNames":["PosNum"],"name":"posNumCoe","className":"CoeHTCT"},{"typeNames":["Num"],"name":"numNatCoe","className":"CoeHTCT"},{"typeNames":["PosNum"],"name":"instReprPosNum","className":"Repr"},{"typeNames":["Num"],"name":"instReprNum","className":"Repr"},{"typeNames":["Num"],"name":"Num.instAddNum","className":"Add"},{"typeNames":["Num"],"name":"Num.instMulNum","className":"Mul"},{"typeNames":["Num"],"name":"Num.instLTNum","className":"LT"},{"typeNames":["Num"],"name":"Num.instLENum","className":"LE"},{"typeNames":[],"name":"Num.decidableLT","className":"Decidable"},{"typeNames":[],"name":"Num.decidableLE","className":"Decidable"},{"typeNames":["ZNum"],"name":"ZNum.instNegZNum","className":"Neg"},{"typeNames":["PosNum"],"name":"PosNum.instSubPosNum","className":"Sub"},{"typeNames":["Num"],"name":"Num.instSubNum","className":"Sub"},{"typeNames":["ZNum"],"name":"ZNum.instAddZNum","className":"Add"},{"typeNames":["ZNum"],"name":"ZNum.instMulZNum","className":"Mul"},{"typeNames":["ZNum"],"name":"ZNum.instLTZNum","className":"LT"},{"typeNames":["ZNum"],"name":"ZNum.instLEZNum","className":"LE"},{"typeNames":[],"name":"ZNum.decidableLT","className":"Decidable"},{"typeNames":[],"name":"ZNum.decidableLE","className":"Decidable"},{"typeNames":["Num"],"name":"Num.instDivNum","className":"Div"},{"typeNames":["Num"],"name":"Num.instModNum","className":"Mod"},{"typeNames":["ZNum"],"name":"ZNum.instDivZNum","className":"Div"},{"typeNames":["ZNum"],"name":"ZNum.instModZNum","className":"Mod"},{"typeNames":["ZNum"],"name":"znumCoe","className":"CoeHTCT"},{"typeNames":["ZNum"],"name":"instReprZNum","className":"Repr"}],"imports":["Init","Mathlib.Mathport.Rename","Mathlib.Init.Data.Nat.Bitwise","Mathlib.Init.Data.Int.Basic","Lean.Linter.Deprecated"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L688-L689","name":"instReprZNum","line":688,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instReprZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instReprZNum\"><span class=\"name\">instReprZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L684-L685","name":"znumCoe","line":684,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#znumCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#znumCoe\"><span class=\"name\">znumCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L677-L680","name":"castZNum","line":677,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#castZNum","doc":"`castZNum` casts a `ZNum` into any type which has `0`, `1`, `+` and `neg` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#castZNum\"><span class=\"name\">castZNum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L665-L666","name":"ZNum.gcd","line":665,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.gcd","doc":"Greatest Common Divisor (GCD) of two `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.gcd\"><span class=\"name\">ZNum</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L661-L662","name":"ZNum.instModZNum","line":661,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instModZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instModZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instModZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L658-L659","name":"ZNum.instDivZNum","line":658,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instDivZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instDivZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instDivZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L652-L655","name":"ZNum.mod","line":652,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.mod","doc":"Modulus of `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.mod\"><span class=\"name\">ZNum</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L642-L648","name":"ZNum.div","line":642,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.div","doc":"Division of `ZNum`, where `x / 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.div\"><span class=\"name\">ZNum</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L633-L634","name":"Num.gcd","line":633,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.gcd","doc":"Greatest Common Divisor (GCD) of two `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.gcd\"><span class=\"name\">Num</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L626-L629","name":"Num.gcdAux","line":626,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.gcdAux","doc":"Auxiliary definition for `Num.gcd`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.gcdAux\"><span class=\"name\">Num</span>.<span class=\"name\">gcdAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L622-L623","name":"Num.instModNum","line":622,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instModNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instModNum\"><span class=\"name\">Num</span>.<span class=\"name\">instModNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L619-L620","name":"Num.instDivNum","line":619,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instDivNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instDivNum\"><span class=\"name\">Num</span>.<span class=\"name\">instDivNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L613-L616","name":"Num.mod","line":613,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.mod","doc":"Modulus of `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.mod\"><span class=\"name\">Num</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L606-L609","name":"Num.div","line":606,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.div","doc":"Division of `Num`s, where `x / 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.div\"><span class=\"name\">Num</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L585-L586","name":"PosNum.mod'","line":585,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.mod'","doc":"Modulus of `PosNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.mod'\"><span class=\"name\">PosNum</span>.<span class=\"name\">mod'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L580-L581","name":"PosNum.div'","line":580,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.div'","doc":"Division of `PosNum`, "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.div'\"><span class=\"name\">PosNum</span>.<span class=\"name\">div'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L569-L576","name":"PosNum.divMod","line":569,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.divMod","doc":"`divMod x y = (y / x, y % x)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.divMod\"><span class=\"name\">PosNum</span>.<span class=\"name\">divMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L562-L565","name":"PosNum.divModAux","line":562,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.divModAux","doc":"Auxiliary definition for `PosNum.divMod`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.divModAux\"><span class=\"name\">PosNum</span>.<span class=\"name\">divModAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L553-L554","name":"ZNum.decidableLE","line":553,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.decidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.decidableLE\"><span class=\"name\">ZNum</span>.<span class=\"name\">decidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L549-L550","name":"ZNum.decidableLT","line":549,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.decidableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.decidableLT\"><span class=\"name\">ZNum</span>.<span class=\"name\">decidableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L546-L547","name":"ZNum.instLEZNum","line":546,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instLEZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instLEZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instLEZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L543-L544","name":"ZNum.instLTZNum","line":543,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instLTZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instLTZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instLTZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L533-L540","name":"ZNum.cmp","line":533,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.cmp","doc":"Ordering on `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.cmp\"><span class=\"name\">ZNum</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L527-L528","name":"ZNum.instMulZNum","line":527,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instMulZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instMulZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instMulZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L518-L524","name":"ZNum.mul","line":518,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.mul","doc":"Multiplication of `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.mul\"><span class=\"name\">ZNum</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L514-L515","name":"ZNum.instAddZNum","line":514,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instAddZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instAddZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instAddZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L505-L511","name":"ZNum.add","line":505,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.add","doc":"Addition of `ZNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.add\"><span class=\"name\">ZNum</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L495-L496","name":"Num.instSubNum","line":495,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instSubNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instSubNum\"><span class=\"name\">Num</span>.<span class=\"name\">instSubNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L491-L492","name":"Num.sub","line":491,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.sub","doc":"Subtraction of two `Num`s, where if `a < b`, `a - b = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.sub\"><span class=\"name\">Num</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L486-L487","name":"Num.psub","line":486,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.psub","doc":"Subtraction of two `Num`s, producing an `Option Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.psub\"><span class=\"name\">Num</span>.<span class=\"name\">psub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L478-L482","name":"Num.sub'","line":478,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.sub'","doc":"Subtraction of two `Num`s, producing a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.sub'\"><span class=\"name\">Num</span>.<span class=\"name\">sub'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L472-L474","name":"Num.ofZNum","line":472,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ofZNum","doc":"Converts a `ZNum` to an `Option Num`, where `ofZNum p = 0` if `p < 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.ofZNum\"><span class=\"name\">Num</span>.<span class=\"name\">ofZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L465-L468","name":"Num.ofZNum'","line":465,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ofZNum'","doc":"Converts a `ZNum` to an `Option Num`, where `ofZNum' p = none` if `p < 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.ofZNum'\"><span class=\"name\">Num</span>.<span class=\"name\">ofZNum'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L457-L461","name":"Num.div2","line":457,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.div2","doc":"Divides a `Num` by `2` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.div2\"><span class=\"name\">Num</span>.<span class=\"name\">div2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L451-L453","name":"Num.pred","line":451,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.pred","doc":"The predecessor of a `Num` as a `Num`, where `pred 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.pred\"><span class=\"name\">Num</span>.<span class=\"name\">pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L445-L447","name":"Num.ppred","line":445,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ppred","doc":"The predecessor of a `Num` as an `Option Num`, where `ppred 0 = none` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.ppred\"><span class=\"name\">Num</span>.<span class=\"name\">ppred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L437-L438","name":"PosNum.instSubPosNum","line":437,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instSubPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instSubPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instSubPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L431-L434","name":"PosNum.sub","line":431,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.sub","doc":"Subtraction of `PosNum`s, where if `a < b`, then `a - b = 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.sub\"><span class=\"name\">PosNum</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L425-L427","name":"PosNum.ofZNum","line":425,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum","doc":"Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">ofZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L419-L421","name":"PosNum.ofZNum'","line":419,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum'","doc":"Converts a `ZNum` to `Option PosNum`, where it is `some` if the `ZNum` was positive and `none`\notherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum'\"><span class=\"name\">PosNum</span>.<span class=\"name\">ofZNum'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L408-L414","name":"PosNum.sub'","line":408,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.sub'","doc":"Subtraction of two `PosNum`s, producing a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.sub'\"><span class=\"name\">PosNum</span>.<span class=\"name\">sub'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L396-L398","name":"ZNum.ofInt'","line":396,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.ofInt'","doc":"Converts an `Int` to a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.ofInt'\"><span class=\"name\">ZNum</span>.<span class=\"name\">ofInt'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L389-L392","name":"ZNum.bitm1","line":389,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.bitm1","doc":"`bitm1 x` appends a `1` to the end of `x`, mapping `x` to `2 * x - 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.bitm1\"><span class=\"name\">ZNum</span>.<span class=\"name\">bitm1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L382-L385","name":"ZNum.bit1","line":382,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.bit1","doc":"`bit1 x` appends a `1` to the end of `x`, mapping `x` to `2 * x + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.bit1\"><span class=\"name\">ZNum</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L375-L378","name":"ZNum.bit0","line":375,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.bit0","doc":"`bit0 n` appends a `0` to the end of `n`, where `bit0 n = n0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.bit0\"><span class=\"name\">ZNum</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L368-L371","name":"ZNum.pred","line":368,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.pred","doc":"The predecessor of a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.pred\"><span class=\"name\">ZNum</span>.<span class=\"name\">pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L361-L364","name":"ZNum.succ","line":361,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.succ","doc":"The successor of a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.succ\"><span class=\"name\">ZNum</span>.<span class=\"name\">succ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L354-L357","name":"ZNum.abs","line":354,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.abs","doc":"The absolute value of a `ZNum` as a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.abs\"><span class=\"name\">ZNum</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L350-L351","name":"ZNum.instNegZNum","line":350,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instNegZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.instNegZNum\"><span class=\"name\">ZNum</span>.<span class=\"name\">instNegZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L344-L347","name":"ZNum.zNeg","line":344,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.zNeg","doc":"The negation of a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.zNeg\"><span class=\"name\">ZNum</span>.<span class=\"name\">zNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L333-L334","name":"Num.ofNat'","line":333,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ofNat'","doc":"Converts a `Nat` to a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.ofNat'\"><span class=\"name\">Num</span>.<span class=\"name\">ofNat'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L327-L329","name":"Num.toZNumNeg","line":327,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.toZNumNeg","doc":"Converts `x : Num` to `-x : ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.toZNumNeg\"><span class=\"name\">Num</span>.<span class=\"name\">toZNumNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L321-L323","name":"Num.toZNum","line":321,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.toZNum","doc":"Converts a `Num` to a `ZNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.toZNum\"><span class=\"name\">Num</span>.<span class=\"name\">toZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L316-L317","name":"Num.decidableLE","line":316,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.decidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.decidableLE\"><span class=\"name\">Num</span>.<span class=\"name\">decidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L312-L313","name":"Num.decidableLT","line":312,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.decidableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.decidableLT\"><span class=\"name\">Num</span>.<span class=\"name\">decidableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L309-L310","name":"Num.instLENum","line":309,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instLENum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instLENum\"><span class=\"name\">Num</span>.<span class=\"name\">instLENum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L306-L307","name":"Num.instLTNum","line":306,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instLTNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instLTNum\"><span class=\"name\">Num</span>.<span class=\"name\">instLTNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L299-L303","name":"Num.cmp","line":299,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.cmp","doc":"Ordering of `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.cmp\"><span class=\"name\">Num</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L293-L294","name":"Num.instMulNum","line":293,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instMulNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instMulNum\"><span class=\"name\">Num</span>.<span class=\"name\">instMulNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L287-L290","name":"Num.mul","line":287,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.mul","doc":"Multiplication of two `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.mul\"><span class=\"name\">Num</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L281-L283","name":"Num.natSize","line":281,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.natSize","doc":"The number of bits required to represent a `Num`, as a `Nat`. `size 0` is defined to be `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.natSize\"><span class=\"name\">Num</span>.<span class=\"name\">natSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L275-L277","name":"Num.size","line":275,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.size","doc":"The number of bits required to represent a `Num`, as a `Num`. `size 0` is defined to be `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.size\"><span class=\"name\">Num</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L270-L271","name":"Num.bit","line":270,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.bit","doc":"`bit b n` appends the bit `b` to the end of `n`, where `bit tt x = x1` and `bit ff x = x0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.bit\"><span class=\"name\">Num</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L264-L266","name":"Num.bit1","line":264,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.bit1","doc":"`bit1 n` appends a `1` to the end of `n`, where `bit1 n = n1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.bit1\"><span class=\"name\">Num</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L258-L260","name":"Num.bit0","line":258,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.bit0","doc":"`bit0 n` appends a `0` to the end of `n`, where `bit0 n = n0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.bit0\"><span class=\"name\">Num</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L254-L255","name":"Num.instAddNum","line":254,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instAddNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.instAddNum\"><span class=\"name\">Num</span>.<span class=\"name\">instAddNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L248-L251","name":"Num.add","line":248,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.add","doc":"Addition of two `Num`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.add\"><span class=\"name\">Num</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L243-L244","name":"Num.succ","line":243,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.succ","doc":"The successor of a `Num` as a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.succ\"><span class=\"name\">Num</span>.<span class=\"name\">succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L237-L239","name":"Num.succ'","line":237,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.succ'","doc":"The successor of a `Num` as a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.succ'\"><span class=\"name\">Num</span>.<span class=\"name\">succ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L227-L228","name":"instReprNum","line":227,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instReprNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instReprNum\"><span class=\"name\">instReprNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L224-L225","name":"instReprPosNum","line":224,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instReprPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instReprPosNum\"><span class=\"name\">instReprPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L218-L219","name":"numNatCoe","line":218,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#numNatCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#numNatCoe\"><span class=\"name\">numNatCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L213-L214","name":"posNumCoe","line":213,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#posNumCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#posNumCoe\"><span class=\"name\">posNumCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L207-L209","name":"castNum","line":207,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#castNum","doc":"`castNum` casts a `Num` into any type which has `0`, `1` and `+`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#castNum\"><span class=\"name\">castNum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L200-L203","name":"castPosNum","line":200,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#castPosNum","doc":"`castPosNum` casts a `PosNum` into any type which has `1` and `+`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#castPosNum\"><span class=\"name\">castPosNum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L186-L187","name":"PosNum.decidableLE","line":186,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.decidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.decidableLE\"><span class=\"name\">PosNum</span>.<span class=\"name\">decidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L182-L183","name":"PosNum.decidableLT","line":182,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.decidableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.decidableLT\"><span class=\"name\">PosNum</span>.<span class=\"name\">decidableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L179-L180","name":"PosNum.instLEPosNum","line":179,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instLEPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instLEPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instLEPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L176-L177","name":"PosNum.instLTPosNum","line":176,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instLTPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instLTPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instLTPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L166-L173","name":"PosNum.cmp","line":166,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.cmp","doc":"Ordering of `PosNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.cmp\"><span class=\"name\">PosNum</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L160-L161","name":"PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat","line":160,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat\"><span class=\"name\">PosNum</span>.<span class=\"name\">instOfNatPosNumHAddNatInstHAddInstAddNatOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L156-L157","name":"PosNum.ofNat","line":156,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofNat","doc":"`ofNat n` is the `PosNum` corresponding to `n`, except for `ofNat 0 = 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.ofNat\"><span class=\"name\">PosNum</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L150-L152","name":"PosNum.ofNatSucc","line":150,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofNatSucc","doc":"`ofNatSucc n` is the `PosNum` corresponding to `n + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.ofNatSucc\"><span class=\"name\">PosNum</span>.<span class=\"name\">ofNatSucc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L146-L147","name":"PosNum.instMulPosNum","line":146,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instMulPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instMulPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instMulPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L140-L143","name":"PosNum.mul","line":140,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.mul","doc":"Multiplication of two `PosNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.mul\"><span class=\"name\">PosNum</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L133-L136","name":"PosNum.natSize","line":133,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.natSize","doc":"The number of bits of a `PosNum`, as a `Nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.natSize\"><span class=\"name\">PosNum</span>.<span class=\"name\">natSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L126-L129","name":"PosNum.size","line":126,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.size","doc":"The number of bits of a `PosNum`, as a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.size\"><span class=\"name\">PosNum</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L121-L122","name":"PosNum.pred","line":121,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.pred","doc":"The predecessor of a `PosNum` as a `PosNum`. This means that `pred 1 = 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.pred\"><span class=\"name\">PosNum</span>.<span class=\"name\">pred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L114-L117","name":"PosNum.pred'","line":114,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.pred'","doc":"The predecessor of a `PosNum` as a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.pred'\"><span class=\"name\">PosNum</span>.<span class=\"name\">pred'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L110-L111","name":"PosNum.instAddPosNum","line":110,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instAddPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.instAddPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instAddPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L101-L107","name":"PosNum.add","line":101,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.add","doc":"Addition of two `PosNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.add\"><span class=\"name\">PosNum</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L95-L97","name":"PosNum.isOne","line":95,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.isOne","doc":"Returns a boolean for whether the `PosNum` is `one`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.isOne\"><span class=\"name\">PosNum</span>.<span class=\"name\">isOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L88-L91","name":"PosNum.succ","line":88,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.succ","doc":"The successor of a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.succ\"><span class=\"name\">PosNum</span>.<span class=\"name\">succ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L83-L84","name":"PosNum.bit","line":83,"kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.bit","doc":"`bit b n` appends the bit `b` to the end of `n`, where `bit tt x = x1` and `bit ff x = x0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit\"><span class=\"name\">PosNum</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L77-L78","name":"instInhabitedZNum","line":77,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instInhabitedZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instInhabitedZNum\"><span class=\"name\">instInhabitedZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L74-L75","name":"instOneZNum","line":74,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instOneZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instOneZNum\"><span class=\"name\">instOneZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L71-L72","name":"instZeroZNum","line":71,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instZeroZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instZeroZNum\"><span class=\"name\">instZeroZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L67-L67","name":"instDecidableEqZNum","line":67,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instDecidableEqZNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instDecidableEqZNum\"><span class=\"name\">instDecidableEqZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L66-L66","name":"ZNum.neg","line":66,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.neg\"><span class=\"name\">ZNum</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L65-L65","name":"ZNum.pos","line":65,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.pos\"><span class=\"name\">ZNum</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L64-L64","name":"ZNum.zero","line":64,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum.zero\"><span class=\"name\">ZNum</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#ZNum\">ZNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L63-L67","name":"ZNum","line":63,"kind":"inductive","docLink":"./Mathlib/Data/Num/Basic.html#ZNum","doc":"Representation of integers using trichotomy around zero.\n\n13 = 1101(base 2) = pos (bit1 (bit0 (bit1 one)))\n-13 = -1101(base 2) = neg (bit1 (bit0 (bit1 one))) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#ZNum\"><span class=\"name\">ZNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L56-L57","name":"instInhabitedNum","line":56,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instInhabitedNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instInhabitedNum\"><span class=\"name\">instInhabitedNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L53-L54","name":"instOneNum","line":53,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instOneNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instOneNum\"><span class=\"name\">instOneNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L50-L51","name":"instZeroNum","line":50,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instZeroNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instZeroNum\"><span class=\"name\">instZeroNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L46-L46","name":"instDecidableEqNum","line":46,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instDecidableEqNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instDecidableEqNum\"><span class=\"name\">instDecidableEqNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L45-L45","name":"Num.pos","line":45,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#Num.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.pos\"><span class=\"name\">Num</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L44-L44","name":"Num.zero","line":44,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#Num.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num.zero\"><span class=\"name\">Num</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L43-L46","name":"Num","line":43,"kind":"inductive","docLink":"./Mathlib/Data/Num/Basic.html#Num","doc":"The type of nonnegative binary numbers, using `PosNum`.\n\n13 = 1101(base 2) = pos (bit1 (bit0 (bit1 one))) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#Num\"><span class=\"name\">Num</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L37-L38","name":"instInhabitedPosNum","line":37,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instInhabitedPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instInhabitedPosNum\"><span class=\"name\">instInhabitedPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L34-L35","name":"instOnePosNum","line":34,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instOnePosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instOnePosNum\"><span class=\"name\">instOnePosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L31-L31","name":"instDecidableEqPosNum","line":31,"kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instDecidableEqPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#instDecidableEqPosNum\"><span class=\"name\">instDecidableEqPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L30-L30","name":"PosNum.bit0","line":30,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.bit0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit0\"><span class=\"name\">PosNum</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L29-L29","name":"PosNum.bit1","line":29,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.bit1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit1\"><span class=\"name\">PosNum</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L28-L28","name":"PosNum.one","line":28,"kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum.one\"><span class=\"name\">PosNum</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Data/Num/Basic.lean#L27-L31","name":"PosNum","line":27,"kind":"inductive","docLink":"./Mathlib/Data/Num/Basic.html#PosNum","doc":"The type of positive binary numbers.\n\n13 = 1101(base 2) = bit1 (bit0 (bit1 one)) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Basic.html#PosNum\"><span class=\"name\">PosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}