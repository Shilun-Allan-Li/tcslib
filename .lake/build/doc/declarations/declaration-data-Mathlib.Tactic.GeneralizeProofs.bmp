{"name":"Mathlib.Tactic.GeneralizeProofs","instances":[],"imports":["Init","Mathlib.Lean.Expr.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Tactic/GeneralizeProofs.lean#L89-L115","name":"Mathlib.Tactic.GeneralizeProofs.generalizeProofs","line":89,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.generalizeProofs","doc":"Generalize proofs in the goal, naming them with the provided list.\n\nFor example:\n```lean\nexample : List.nthLe [1, 2] 1 dec_trivial = 2 := by\n  -- ⊢ [1, 2].nthLe 1 _ = 2\n  generalize_proofs h,\n  -- h : 1 < [1, 2].length\n  -- ⊢ [1, 2].nthLe 1 h = 2\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.generalizeProofs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">generalizeProofs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Tactic/GeneralizeProofs.lean#L56-L87","name":"Mathlib.Tactic.GeneralizeProofs.visit","line":56,"kind":"opaque","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.visit","doc":"Recursively generalize proofs occurring in e "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.visit\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.M\">Mathlib.Tactic.GeneralizeProofs.M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Tactic/GeneralizeProofs.lean#L41-L41","name":"Mathlib.Tactic.GeneralizeProofs.M","line":41,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.M","doc":"Monad used by the `generalizeProofs` tactic, carries an expr cache and state with\nnames to use and previous generalizations "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.M\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Tactic/GeneralizeProofs.lean#L37-L37","name":"Mathlib.Tactic.GeneralizeProofs.State.curIdx","line":37,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State.curIdx","doc":"The generalizations made so far "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State.curIdx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">State</span>.<span class=\"name\">curIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State\">Mathlib.Tactic.GeneralizeProofs.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Tactic/GeneralizeProofs.lean#L35-L35","name":"Mathlib.Tactic.GeneralizeProofs.State.nextIdx","line":35,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State.nextIdx","doc":"The user provided names, may be anonymous "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State.nextIdx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">State</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State\">Mathlib.Tactic.GeneralizeProofs.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Tactic/GeneralizeProofs.lean#L33-L33","name":"Mathlib.Tactic.GeneralizeProofs.State.mk","line":33,"kind":"ctor","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(nextIdx : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curIdx : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State\">Mathlib.Tactic.GeneralizeProofs.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/3b81a542da60bafaae06756ff194ad50e9c83921/Mathlib/Tactic/GeneralizeProofs.lean#L33-L37","name":"Mathlib.Tactic.GeneralizeProofs.State","line":33,"kind":"structure","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State","doc":"State for the generalize proofs tactic, contains the remaining names to be used and the\nlist of generalizations so far "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.State\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}